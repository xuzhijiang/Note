<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--http://mybatis.org/dtd/mybatis-3-mapper.dtd定义了xml中支持哪些标签-->
<mapper namespace="org.mybatis.core.mapper.UserMapper">
    <!-- 配置二级缓存 -->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
<!--    <cache eviction="LRU" flushInterval="600000" readOnly="false" size="1024"></cache>-->
    <!--
    eviction:缓存的回收策略：
        • LRU – 最近最少使用的：移除最长时间不被使用的对象。
        • FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
        • SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
        • WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
        • 默认的是 LRU。
    flushInterval：缓存清空刷新的时间间隔
        缓存多长时间清空一次，默认不清空，可以设置一个毫秒值
    readOnly:是否只读：
        true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。
                 mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快
        false：非只读(这是默认值)：mybatis觉得获取的数据可能会被修改。
                mybatis会利用序列化&反序列的技术克隆一份新的数据给你。安全，速度慢
                需要对应的实体类能够序列化.
    size：缓存存放多少元素；
    type=""：cache使用的类型，默认是PerpetualCache；
            需要实现org.apache.ibatis.cache.Cache接口即可；
            Mybatis是一个做orm框架的这么一个东西,对缓存Cache不专业,所以一般我们都需要使用其他的第三方的Cache来存储二级缓存.
            (比如Redis/Ehcache/Memcached).mybatis把缓存的专业的技能留给了别人,自己只定义了规范Cache接口,然后
            别人实现即可.

            mybatis帮你考虑好了这些问题,所以mybatis自己弄了一个和ehcache适配的中间包,
            这个中间包中有这么一个类org.mybatis.caches.ehcache.EhcacheCache,实现了mybatis的Cache接口
            这个类内部就是把缓存存到ehcache中的.
    -->



    <!--
        namespace:名称空间;指定为接口的全类名
        id：唯一标识
        resultType：返回值类型
        #{id}：从传递过来的参数中取出id值
     -->
    <insert id="insert" parameterType="org.mybatis.core.model.User" flushCache="true">
        INSERT INTO user(id, last_name, email, gender) VALUES (#{id}, #{lastName}, #{email}, #{gender})
    </insert>

    <!-- mybatis会更加精确的匹配databaseId的sql. -->
    <!-- 第一个因为没有标识databaseId,所以如果当前为mysql数据库,那么会加载databaseId=mysql的sql.-->
    <select id="selectById" parameterType="int" resultType="User">
             SELECT * FROM user where id=#{id}
    </select>
    <select id="selectById" parameterType="int" resultType="User" databaseId="mysql-xzj">
        SELECT * FROM user where id=#{id}
    </select>
    <select id="selectById" parameterType="int" resultType="User" databaseId="oracle-xzj">
        select EMPLOYEE_ID id,LAST_NAME	lastName,EMAIL email
		from employees where EMPLOYEE_ID=#{id}
    </select>

</mapper>