<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--http://mybatis.org/dtd/mybatis-3-mapper.dtd定义了xml中支持哪些标签-->
<mapper namespace="org.mybatis.core.mapper.UserMapperPlus">
    <!--自定义某个javaBean的封装规则(定义了之后,驼峰命名那个属性就可以不用配置了)
        type：自定义规则的Java类型
        id:唯一id方便引用
    -->
    <resultMap id="MySimpleUser" type="org.mybatis.core.model.User">
        <!--指定主键列的封装规则
            id定义主键列如何封装,mybatis会底层有优化；
            column：指定哪一列
            property：指定对应的javaBean属性
        -->
        <id column="id" property="id"></id>
        <!-- result定义普通列封装规则 -->
        <result column="last_name" property="lastName"></result>
        <!-- 其他不指定的列会自动封装：我们只要写resultMap,就把全部的映射规则都写上 -->
        <result column="email" property="email"></result>
        <result column="gender" property="gender"></result>
    </resultMap>
    <!-- resultMap:自定义结果集映射规则；resultMap和resultType只能二选一用一个  -->
    <select id="getUserById" resultMap="MySimpleUser">
        select * from user where id=#{id}
    </select>

    <!--
    场景一：
        查询User的同时查询员工对应的部门
        User===Department
        一个员工有与之对应的部门信息；
        id  last_name  gender    d_id     did  dept_name (private Department dept;)
     -->
    <!--
        联合查询：级联属性封装结果集
      -->
    <resultMap id="MyDifUser" type="User">
        <id column="id" property="id"></id>
        <result column="last_name" property="lastName"></result>
        <result column="did" property="dept.id"></result>
        <result column="dept_name" property="dept.departmentName"></result>
    </resultMap>
    <select id="getUserAndDept01" resultMap="MyDifUser">
        SELECT u.id id,u.last_name last_name,u.gender gender,
        u.d_id d_id,d.id did,d.dept_name dept_name FROM USER u INNER JOIN tb_dept d
        ON u.d_id=d.id AND u.id = #{id};
    </select>

    <!--
        使用association定义关联的单个对象的封装规则；
     -->
    <resultMap id="MyDifUser2" type="User">
        <id column="id" property="id"></id>
        <result column="last_name" property="lastName"></result>
        <!--  association可以指定联合的javaBean对象
            property="dept"：指定哪个属性是联合的对象(这里指定是User的dept这个属性)
            javaType:指定这个属性对象的类型[不能省略]
        -->
        <association property="dept" javaType="org.mybatis.core.model.Department">
            <id column="did" property="id"></id>
            <result column="dept_name" property="departmentName"></result>
        </association>
    </resultMap>
    <select id="getUserAndDept02" resultMap="MyDifUser2">
        SELECT u.id id,u.last_name last_name,u.gender gender,
        u.d_id d_id,d.id did,d.dept_name dept_name FROM USER u INNER JOIN tb_dept d
        ON u.d_id=d.id where u.id = #{id};
    </select>

    <!-- 使用association进行分步查询：
        1、先按照员工id查询员工信息
        2、根据查询员工信息中的d_id值去部门表查出部门信息
        3、部门设置到员工中；
     -->
    <!--  id  last_name  email   gender    d_id   -->
    <resultMap id="MyEmpByStep" type="User">
        <id column="id" property="id"></id>
        <result column="last_name" property="lastName"></result>
        <result column="email" property="email"></result>
        <result column="gender" property="gender"></result>
        <!-- association定义关联对象的封装规则
            select:表明当前属性是调用select指定的方法查出的结果
            column:指定将哪一列的值传给这个方法

            流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
         -->
        <association property="dept"
                     select="org.mybatis.core.mapper.DepartmentMapper.getDeptById"
                     column="d_id">
        </association>
    </resultMap>
    <select id="getEmpByIdStep" resultMap="MyEmpByStep">
        select * from user where id=#{id}
        <if test="_parameter!=null">
            and 1=1
        </if>
    </select>
    <!-- 可以使用延迟加载（懒加载）；(按需加载)
	 	Employee==>Dept：
	 		我们每次查询Employee对象的时候，都将一起查询出来。
	 		部门信息在我们使用的时候再去查询；
	 		分段查询的基础之上加上两个配置：
	  -->
    <!-- ==================association EDN============================ -->
    <select id="getUsersByDeptId" resultType="org.mybatis.core.model.User">
        select * from user where d_id=#{deptId}
    </select>


    <!-- =======================鉴别器(不是用的太多,非常少.了解即可)============================ -->
    <!-- <discriminator javaType=""></discriminator>
        鉴别器：mybatis可以根据discriminator判断某列的值，然后根据某列的值改变封装行为.
        封装User：
            如果查出的是女生：就把Dept信息查询出来，否则不查询；
            如果是男生，把last_name这一列的值赋值给email;
     -->
    <resultMap type="org.mybatis.core.model.User" id="MyUserDis">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!--
            column：指定判定的列名
            javaType：列值对应的java类型  -->
        <discriminator javaType="string" column="gender">
            <!--女生  resultType:指定封装的结果类型；不能缺少。/resultMap-->
            <case value="female" resultType="org.mybatis.core.model.User">
                <association property="dept"
                             select="org.mybatis.core.mapper.DepartmentMapper.getDeptById"
                             column="d_id">
                </association>
            </case>
            <!--男生 ;如果是男生，把last_name这一列的值赋值给email; -->
            <case value="male" resultType="org.mybatis.core.model.User">
                <id column="id" property="id"/>
                <result column="last_name" property="lastName"/>
                <result column="last_name" property="email"/>
                <result column="gender" property="gender"/>
            </case>
        </discriminator>
    </resultMap>
    <select id="getUserByIdStep" resultMap="MyUserDis">
        select * from user where id=#{id}
    </select>
</mapper>