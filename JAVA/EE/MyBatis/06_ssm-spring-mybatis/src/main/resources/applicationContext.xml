<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!-- spring的配置文件 -->
    <!-- Spring希望管理所有的业务逻辑组件，等。。。 -->
    <!-- Spring用来控制业务逻辑(所以数据源、事务控制、aop都在spring配置文件中控制) -->
    <context:component-scan base-package="com.spring.mybatis">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 引入数据库的配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" />
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>
    <!-- spring事务管理,使用DataSourceTransactionManager这个事务管理器 -->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 开启基于注解的事务 -->
    <!-- 如果上面的bean的id为transactionManager,这里就可以不用配置了 -->
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>

    <!--
	整合mybatis
		目的：1、spring管理所有组件。mapper的实现类。
				service==>Dao   @Autowired:自动注入mapper；
			2、spring用来管理事务，spring声明式事务
	-->
    <!--创建出SqlSessionFactory对象  -->
    <!--SqlSessionFactoryBean实现了spring的FactoryBean接口,只要实现了这个接口的类,都是一个工厂类  -->
    <!--spring会调用FactoryBEan的getObject方法来创建对象.  -->
    <!--SqlSessionFactoryBean的getObject方法创建出的就是SqlSessionFactory对象  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 这样spring帮我们创建的SqlSessionFactory对象就是使用这个spring提供的DataSource -->
        <property name="dataSource" ref="dataSource" />
        <!-- configLocation指定全局配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!--mapperLocations: 指定mapper文件的位置-->
        <property name="mapperLocations" value="classpath:UserMapper.xml" />
        <!--在这里可以配置很多属性,所以mybatis的全局配置文件中很多配置就可以不用写了 -->
        <!--mybatis的全局配置文件只留下经常修改的配置即可 -->
    </bean>

    <!--配置一个可以进行批量执行的sqlSession  -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
        <constructor-arg name="executorType" value="BATCH" />
    </bean>

    <!-- 扫描所有的mapper接口的实现，让这些mapper能够自动注入；
        base-package：指定mapper接口的包名
    -->
    <mybatis-spring:scan base-package="com.spring.mybatis.mapper" />
    <!-- 和上面的mybatis-spring:scan base-package配置一样的功能,下面的一般是老项目使用 -->
    <!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.atguigu.mybatis.dao"></property>
    </bean> -->
</beans>