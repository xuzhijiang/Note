<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
        classpath下的MyBatis全局配置文件可以配置的属性如下:
        - properties 属性
        - settings 设置
        - typeAliases 类型别名
        - typeHandlers 类型处理器
        - objectFactory 对象工厂
        - plugins 插件
        - environments 环境
          - environment 环境变量
            - transactionManager 事务管理器
            - dataSource 数据源
        - databaseIdProvider 数据库厂商标识
        - mappers 映射器
    -->

    <!--
        1、mybatis可以使用properties来引入外部properties配置文件的内容；
        resource：引入类路径下的资源
        url：引入网络路径或者磁盘路径下的资源
    -->
    <properties resource="dbconfig.properties"></properties>

    <settings>
        <!--logger公共前缀，value值随意，不过记得加上一个"."-->
        <setting name="logPrefix" value="mybatis."/>
        <!--全局开启或关闭配置文件中的所有映射器任何缓存,默认值true,也就是会全局开启-->
        <setting name="cacheEnabled" value="true"/>
        <!--全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载，默认值true-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!--开启，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载，默认值true-->
        <!--当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。-->
        <setting name="aggressiveLazyLoading" value="true"/>
        <!--是否允许单一语句返回多结果集，默认值true-->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!--是否可以使用列的别名，默认值true-->
        <setting name="useColumnLabel" value="true"/>
        <!--允许 JDBC 生成主键。需要驱动器支持。如果设为了 true，这个设置将强制使用被自动生成的主键,默认值true-->
        <setting name="useGeneratedKeys" value="false"/>
        <!--指定 MyBatis 应如何自动映射列到字段或属性。
        NONE：不映射(表示取消自动映射) PARTIAL：部分 FULL:全部
        PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。FULL 会自动映射任意复杂的结果集-->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!--指定发现自动映射目标未知列（或者未知属性类型）的行为。 NONE: 不做任何反应
        WARNING: 输出提醒,NONE, WARNING, FAILING-->
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
        <!--配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。SIMPLE REUSE BATCH-->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!--设置超时时间，它决定驱动等待数据库响应的秒数。任意正整数-->
        <setting name="defaultStatementTimeout" value="25"/>
        <!--为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。任意正整数-->
        <setting name="defaultFetchSize" value="100"/>
        <!--允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为false。,默认true-->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!--允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为false。默认true-->
        <setting name="safeResultHandlerEnabled" value="false"/>
        <!--是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。-->
        <setting name="mapUnderscoreToCamelCase" value="false"/>
        <!-- 设置本地缓存范围 session:就会有数据的共享 statement:语句范围 (这样就不会有数据的共享 ) defalut:session -->
        <setting name="localCacheScope" value="SESSION"/>
        <!--设置 JDBC 类型为空时,某些驱动程序 要指定值, default:OTHER。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。-->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!--指定哪个对象的方法触发一次延迟加载。	-->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
        <!--指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的。-->
        <setting name="callSettersOnNulls" value="true"/>
        <!--当返回行的所有列都是空时，MyBatis默认返回null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 (i.e. collectioin and association)。（从3.4.2开始）-->
        <setting name="returnInstanceForEmptyRow" value="true"/>
        <!--指定 MyBatis 所用日志的具体实现，未指定时将自动查找。-->
        <setting name="logImpl" value="实现类"/>
        <!--<setting name="logImpl" value="STDOUT_LOGGING" /> STDOUT_LOGGING使用的是别名-->
        <!--指定 Mybatis 创建具有延迟加载能力的对象用到的代理工具。	-->
        <setting name="proxyFactory" value="CGLIB"/>
    </settings>

    <environments default="dev_mysql">
        <!--environments元素：
            尽管可以配置多个环境，每个 SqlSessionFactory 实例只能选择其一,
            所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。
            而如果是三个数据库，就需要三个 SqlSessionFactory 实例
        -->
        <environment id="dev_mysql">
            <transactionManager type="MANAGED" />
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver" />
                <property name="url" value="jdbc:mysql://localhost:3306/mydb"/>
                <property name="username" value="root" />
                <property name="password" value="password" />
            </dataSource>
        </environment>
        <environment id="test">
            <transactionManager type="JDBC">
                <property name="..." value="..."/>
            </transactionManager>
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>

    <mappers>
        <mapper resource="mapper/UserMapper.xml"/>
    </mappers>
</configuration>