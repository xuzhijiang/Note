<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--http://mybatis.org/dtd/mybatis-3-config.dtd定义了xml中支持哪些标签-->
<!-- cofiguration元素：全局配置文件的根元素，作为mybatis对配置进行解析的入口,注意这里面的标签是有顺序的-->
<!-- 这些标签的编写都是有顺序的,不能想在哪里写就在哪里写,可以进入configuration标签中查看支持的标签的顺序 -->
<configuration>
    <!--
        1、mybatis可以使用properties来引入外部properties配置文件的内容；
        resource：引入类路径下的资源
        url：引入网络路径或者磁盘路径下的资源
    -->
    <properties resource="dbconfig.properties"></properties>

    <!--
        2、settings包含很多重要的设置项,这些配置项都是mybatis定义好的,都有默认值
            setting:用来设置每一个设置项
                name：设置项名
                value：设置项取值
    -->
    <settings>
        <!--logger打印日志的公共前缀，value值随意，不过记得加上一个"."-->
        <setting name="logPrefix" value="mybatis-xzj."/>
        <!-- 开启驼峰命名规则匹配之后,数据库中只需要last_name,代码中只需要驼峰命名就可以和数据库中的字段匹配了-->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>

    <!-- 3、typeAliases：别名处理器：可以为我们的java类型起别名
			别名不区分大小写
	-->
    <typeAliases>
        <!-- 1、typeAlias:为某个java类型起别名
                type:指定要起别名的类型全类名;默认别名就是类名小写；user
                alias:指定新的别名
         -->
        <!-- <typeAlias type="org.mybatis.core.model.User" alias="user-xzj"/> -->

        <!-- 2、package:为某个包下的所有类批量起别名
                name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写），）
        -->
        <package name="org.mybatis.core.model"/>

        <!-- 3、批量起别名的情况下，使用@Alias注解为某个类型指定新的别名 -->
        <!--
            @Alias("author")
            public class Author {}
         -->
    </typeAliases>

    <!--
        typeHandlers: 类型处理器,架起java类型和数据库类型一一映射的桥梁.我们把java对象中比如String类型的变量
        如何保存成数据库中兼容的varchar,char.反之亦然.
    -->

    <!--
    4、environments：环境们，mybatis可以配置多种环境 ,default属性指定使用某种环境。可以达到快速切换环境
        - environment：配置一个具体的环境信息；必须有两个标签(transactionManager和dataSource)；
            id代表当前环境的唯一标识(通过environments的default属性动态的指定上所需要的环境的id,就可以切换到对应的环境)

            transactionManager：事务管理器；
                type：事务管理器的类型;JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory).
                        其中：JDBC使用jdbc的提交和回滚来管理事务，mybatis都会自动开启事务。
                              MANAGED，表示事务由应用程序来控制，也就是我们需要手动的开启事务和提交事务。
                    当然我们也可以自定义事务管理器：实现TransactionFactory接口.type指定为全类名(当然JDBC和MANAGED使用了别名).
                    当然我们现在都是交给spring来进行事务管理,所以这里了解即可.(和spring整合时，开启和提交事务的操作交由spring来管理)

            dataSource：数据源;
                type:数据源类型的全类名;UNPOOLED(UnpooledDataSourceFactory-不使用连接池技术,每一次curd都从数据库中拿一次新的连接,而不是用连接池.)
                            |POOLED(PooledDataSourceFactory-使用连接池技术,使用mybatis自带的PooledDataSource)
                            |JNDI(JndiDataSourceFactory)
                当然也可以自定义数据源：只需要实现DataSourceFactory接口，在这个接口的getDataSource()方法中返回自定义的数据源即可.
                当然我们数据源的配置最终也是由spring来做,所以这里了解即可.
     -->
    <environments default="dev_mysql">
        <environment id="dev_mysql">
            <!--type="JDBC" 代表使用jdbc的提交和回滚来管理事务-->
            <transactionManager type="JDBC" />
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}" />
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}" />
                <property name="password" value="${jdbc.password}" />
            </dataSource>
        </environment>
        <environment id="dev_oracle">
            <transactionManager type="JDBC" />
            <dataSource type="POOLED">
                <property name="driver" value="${orcl.driver}" />
                <property name="url" value="${orcl.url}" />
                <property name="username" value="${orcl.username}" />
                <property name="password" value="${orcl.password}" />
            </dataSource>
        </environment>
    </environments>

    <!-- 5、databaseIdProvider：支持多数据库厂商；
     type="DB_VENDOR"：这个DB_VENDOR也是一个别名,对应的类是VendorDatabaseIdProvider.class,
         作用就是得到数据库厂商的标识(这个标识是数据库驱动自带的:在java.sql.Connection中有一个getMetaData()方法,
         这个方法返回java.sql.DatabaseMetaData接口的实现对象,通过这个对象的getDatabaseProductName()方法,返回数据库厂商标识)，
         mybatis就能根据数据库厂商标识来执行不同的sql;

         mysql数据库的厂商标识: MySQL,
         oracle是: Oracle,
         sql server是这样子: SQL Server
  -->
    <databaseIdProvider type="DB_VENDOR">
        <!-- 为不同的数据库厂商起别名,这个别名可以在XXXmapper.xml中使用 -->
        <property name="MySQL" value="mysql-xzj"/>
        <property name="Oracle" value="oracle-xzj"/>
        <property name="SQL Server" value="sqlserver-xzj"/>
    </databaseIdProvider>

    <!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 -->
    <!-- 6、mappers：将sql映射注册到全局配置中 -->
    <mappers>
        <!--
			mapper:注册一个sql映射
				注册配置文件
				resource：引用类路径下的sql映射文件
					mybatis/mapper/EmployeeMapper.xml
				url：引用网路路径或者磁盘路径下的sql映射文件
					file:///var/mappers/AuthorMapper.xml

				class： 注册接口,直接写接口的全类名
					1、如果有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
					2、没有sql映射文件，所有的sql都是利用注解写在接口上;
					推荐：
						A. 比较重要的复杂的Dao接口,我们来写sql映射文件
						B. 不重要，简单的Dao接口,为了开发快速可以使用注解；
		-->
        <!-- <mapper resource="mybatis/mapper/EmployeeMapper.xml"/> -->
        <mapper resource="mapper/UserMapper.xml"/>
        <!-- <mapper class="org.mybatis.core.mapper.UserMapperAnnotation"/> -->

        <!-- 批量注册(映射文件名必须和接口同名，并且放在与接口同一目录下)： -->
        <!-- 为了视觉效果的好看,可以在resources下建立org.mybatis.core.mapper,然后xml放到这个dao目录下 -->
        <!-- 因为resources最终和源码编译生成的class文件都会放到类路径下.-->
        <!-- <package name="org.mybatis.core.mapper"/>-->
    </mappers>
</configuration>